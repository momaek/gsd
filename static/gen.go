package static

//go:generate go run makestatic.go

import (
	"bytes"
	"fmt"
	"go/format"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"unicode"

	"github.com/wellington/go-libsass"
)

// Generate reads a set of files and returns a file buffer that declares
// a map of string constants containing contents of the input files.
func Generate() ([]byte, error) {
	buf := new(bytes.Buffer)
	fmt.Fprintf(buf, "%v\n\npackage static\n\n", comments)
	fmt.Fprintf(buf, "var Files = map[string]string{\n")

	err := filepath.Walk("./", func(path string, fileInfo os.FileInfo, err error) error {
		if err != nil || fileInfo.IsDir() {
			return err
		}

		if filepath.Ext(fileInfo.Name()) == ".go" {
			return nil
		}

		data, err := ioutil.ReadFile(path)
		if err != nil {
			return err
		}

		err = preprocessing(buf, path, data)
		if err != nil {
			return err
		}

		return nil
	})
	if err != nil {
		return nil, err
	}

	fmt.Fprintln(buf, "}")

	return format.Source(buf.Bytes())
}

// preprocessing
func preprocessing(buf *bytes.Buffer, filename string, data []byte) error {

	var (
		extension = filepath.Ext(filename)
		fn        = strings.TrimSuffix(filename, extension)
	)

	switch extension {
	case ".go":
		break

	case ".scss":
		cssbuf := new(bytes.Buffer)
		comp, err := libsass.New(cssbuf, bytes.NewReader(data))
		if err != nil {
			return err
		}

		if err := comp.Run(); err != nil {
			return err
		}

		fmt.Fprintf(buf, "\t%q: ", fn+".css")
		appendQuote(buf, cssbuf.Bytes())
		fmt.Fprintf(buf, ",\n\n")

	default:
		fmt.Fprintf(buf, "\t%q: ", filename)
		appendQuote(buf, data)
		fmt.Fprintf(buf, ",\n\n")
	}

	return nil
}

// appendQuote is like strconv.AppendQuote, but we avoid the latter
// because it changes when Unicode evolves, breaking gen_test.go.
func appendQuote(out *bytes.Buffer, data []byte) {
	out.WriteByte('"')
	for _, b := range data {
		if b == '\\' || b == '"' {
			out.WriteByte('\\')
			out.WriteByte(b)
		} else if b <= unicode.MaxASCII && unicode.IsPrint(rune(b)) && !unicode.IsSpace(rune(b)) {
			out.WriteByte(b)
		} else {
			fmt.Fprintf(out, "\\x%02x", b)
		}
	}
	out.WriteByte('"')
}

const comments = `
// Code generated by "makestatic"; DO NOT EDIT.`
